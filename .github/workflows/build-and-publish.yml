name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds using Alpine container
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name_suffix: linux-musl-amd64
            cross_compile: false
            use_container: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name_suffix: linux-musl-arm64
            cross_compile: true
            use_container: true
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name_suffix: windows-amd64
            cross_compile: false
            use_container: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            name_suffix: windows-arm64
            cross_compile: true
            use_container: false
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            name_suffix: macos-amd64
            cross_compile: false
            use_container: false
          - os: macos-latest
            target: aarch64-apple-darwin
            name_suffix: macos-arm64
            cross_compile: false
            use_container: false

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.use_container && 'rust:alpine' || null }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust (for non-container builds)
      if: matrix.use_container == false
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Alpine environment and cross-compilation (Linux builds)
      if: matrix.use_container == true
      run: |
        # Install necessary packages for cross-compilation
        if [ "${{ matrix.cross_compile }}" = "true" ]; then
          apk add --no-cache binutils-aarch64
        fi
        # Add the target
        rustup target add ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Windows ARM64)
      if: matrix.os == 'windows-latest' && matrix.cross_compile
      run: |
        # Windows ARM64 cross-compilation is handled by rustc itself
        echo "Windows ARM64 cross-compilation setup complete"

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Test (skip cross-compiled targets for now)
      if: matrix.cross_compile == false
      run: cargo test --release --target ${{ matrix.target }}

    - name: Prepare binary for upload
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == windows-* ]]; then
          cp target/${{ matrix.target }}/release/bump.exe bump-${{ matrix.name_suffix }}.exe
        else
          cp target/${{ matrix.target }}/release/bump bump-${{ matrix.name_suffix }}
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: bump-${{ matrix.name_suffix }}
        path: bump-${{ matrix.name_suffix }}*
        if-no-files-found: error

  publish:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release files
      run: |
        mkdir -p ./release
        # Copy all binaries to release directory
        find ./artifacts -name "bump-*" -type f -exec cp {} ./release/ \;
        ls -la ./release/

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.FSTORM_PRIVATE_ACCESS_TOKEN }}
    