use crate::{BumpError, Version};
use std::fs;
use std::path::Path;

#[derive(Debug, Clone, Copy)]
pub enum Language {
    C,
    Go,
    Java,
    CSharp,
}

impl Language {
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "c" => Some(Language::C),
            "go" => Some(Language::Go),
            "java" => Some(Language::Java),
            "csharp" => Some(Language::CSharp),
            _ => None,
        }
    }

    fn file_description(self) -> &'static str {
        match self {
            Language::C => "C header file",
            Language::Go => "Go source file",
            Language::Java => "Java source file",
            Language::CSharp => "C# source file",
        }
    }
}

fn c_output(version: &Version, path: &Path, version_str: &str) -> Result<(), BumpError> {
    let content = format!(
        r#"/** This file is generated by:
 *  ____  __  __  __  __  ____ 
 * (  _ \(  )(  )(  \/  )(  _ \
 *  ) _ < )(__)(  )    (  )___/
 * (____/(______)(_/\/\_)(__)  
 *
 * https://github.com/launchfirestorm/bump
 */

#ifndef BUMP_VERSION_H
#define BUMP_VERSION_H

#define VERSION_PREFIX "{}"
#define VERSION_MAJOR {}
#define VERSION_MINOR {}
#define VERSION_PATCH {}
#define VERSION_CANDIDATE {}
#define VERSION_STRING "{}"

#endif /* BUMP_VERSION_H */
"#,
        version.prefix, version.major, version.minor, version.patch, version.candidate, version_str
    );

    fs::write(path, content).map_err(BumpError::IoError)?;
    println!(
        "{} written to {}",
        Language::C.file_description(),
        path.display()
    );
    Ok(())
}

fn go_output(version: &Version, path: &Path, version_str: &str) -> Result<(), BumpError> {
    let content = format!(
        r#"// This file is generated by:
//  ____  __  __  __  __  ____ 
// (  _ \(  )(  )(  \/  )(  _ \
//  ) _ < )(__)(  )    (  )___/
// (____/(______)(_/\/\_)(__)  
//
// https://github.com/launchfirestorm/bump

package version

const (
	PREFIX    = "{}"
	MAJOR     = {}
	MINOR     = {}
	PATCH     = {}
	CANDIDATE = {}
	STRING    = "{}"
)
"#,
        version.prefix, version.major, version.minor, version.patch, version.candidate, version_str
    );

    fs::write(path, content).map_err(BumpError::IoError)?;
    println!(
        "{} written to {}",
        Language::Go.file_description(),
        path.display()
    );
    Ok(())
}

fn java_output(version: &Version, path: &Path, version_str: &str) -> Result<(), BumpError> {
    let content = format!(
        r#"/**
 * This file is generated by:
 *  ____  __  __  __  __  ____ 
 * (  _ \(  )(  )(  \/  )(  _ \
 *  ) _ < )(__)(  )    (  )___/
 * (____/(______)(_/\/\_)(__)  
 *
 * https://github.com/launchfirestorm/bump
 */

public class Version {{
    public static final String PREFIX = "{}";
    public static final int MAJOR = {};
    public static final int MINOR = {};
    public static final int PATCH = {};
    public static final int CANDIDATE = {};
    public static final String STRING = "{}";
}}
"#,
        version.prefix, version.major, version.minor, version.patch, version.candidate, version_str
    );

    fs::write(path, content).map_err(BumpError::IoError)?;
    println!(
        "{} written to {}",
        Language::Java.file_description(),
        path.display()
    );
    Ok(())
}

fn csharp_output(version: &Version, path: &Path, version_str: &str) -> Result<(), BumpError> {
    let content = format!(
        r#"/**
 * This file is generated by:
 *  ____  __  __  __  __  ____ 
 * (  _ \(  )(  )(  \/  )(  _ \
 *  ) _ < )(__)(  )    (  )___/
 * (____/(______)(_/\/\_)(__)  
 *
 * https://github.com/launchfirestorm/bump
 */

public static class Version {{
    public const string PREFIX = "{}";
    public const int MAJOR = {};
    public const int MINOR = {};
    public const int PATCH = {};
    public const int CANDIDATE = {};
    public const string STRING = "{}";
}}
"#,
        version.prefix, version.major, version.minor, version.patch, version.candidate, version_str
    );

    fs::write(path, content).map_err(BumpError::IoError)?;
    println!(
        "{} written to {}",
        Language::CSharp.file_description(),
        path.display()
    );
    Ok(())
}

pub fn output_file(
    lang: &Language,
    version: &Version,
    version_str: &str,
    path: &Path,
) -> Result<(), BumpError> {
    match lang {
        Language::C => c_output(version, path, version_str),
        Language::Go => go_output(version, path, version_str),
        Language::Java => java_output(version, path, version_str),
        Language::CSharp => csharp_output(version, path, version_str),
    }
}
